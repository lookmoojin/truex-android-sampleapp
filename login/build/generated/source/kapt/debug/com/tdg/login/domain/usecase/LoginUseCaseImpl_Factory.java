// Generated by Dagger (https://dagger.dev).
package com.tdg.login.domain.usecase;

import com.tdg.login.data.repository.OauthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginUseCaseImpl_Factory implements Factory<LoginUseCaseImpl> {
  private final Provider<OauthRepository> oauthRepositoryProvider;

  public LoginUseCaseImpl_Factory(Provider<OauthRepository> oauthRepositoryProvider) {
    this.oauthRepositoryProvider = oauthRepositoryProvider;
  }

  @Override
  public LoginUseCaseImpl get() {
    return newInstance(oauthRepositoryProvider.get());
  }

  public static LoginUseCaseImpl_Factory create(Provider<OauthRepository> oauthRepositoryProvider) {
    return new LoginUseCaseImpl_Factory(oauthRepositoryProvider);
  }

  public static LoginUseCaseImpl newInstance(OauthRepository oauthRepository) {
    return new LoginUseCaseImpl(oauthRepository);
  }
}
