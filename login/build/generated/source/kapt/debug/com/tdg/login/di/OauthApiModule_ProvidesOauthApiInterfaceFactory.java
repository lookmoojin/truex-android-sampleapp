// Generated by Dagger (https://dagger.dev).
package com.tdg.login.di;

import com.tdg.login.api.OauthApiInterface;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "com.tdg.login.di.DefaultOkHttp",
    "com.tdg.login.di.GsonConverter"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class OauthApiModule_ProvidesOauthApiInterfaceFactory implements Factory<OauthApiInterface> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Converter.Factory> gsonConverterFactoryProvider;

  public OauthApiModule_ProvidesOauthApiInterfaceFactory(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Converter.Factory> gsonConverterFactoryProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
  }

  @Override
  public OauthApiInterface get() {
    return providesOauthApiInterface(okHttpClientProvider.get(), gsonConverterFactoryProvider.get());
  }

  public static OauthApiModule_ProvidesOauthApiInterfaceFactory create(
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<Converter.Factory> gsonConverterFactoryProvider) {
    return new OauthApiModule_ProvidesOauthApiInterfaceFactory(okHttpClientProvider, gsonConverterFactoryProvider);
  }

  public static OauthApiInterface providesOauthApiInterface(OkHttpClient okHttpClient,
      Converter.Factory gsonConverterFactory) {
    return Preconditions.checkNotNullFromProvides(OauthApiModule.INSTANCE.providesOauthApiInterface(okHttpClient, gsonConverterFactory));
  }
}
